name: Build master binaries

on:
  push:
    branches: [ master ]

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Build CLI
        env:
          CGO_ENABLED: 0
        run: |
          go build -o ./build/dsl ./cmd

      - name: Build GUI
        run: |
          go build -tags gui -o ./build/dsl-gui ./cmd

      - name: Zip
        run: |
          cd ./build
          zip -0 -r build.zip ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: ./build/build.zip

  build-windows:
    name: Build (Windows)
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build CLI
        env:
          CGO_ENABLED: 0
        run: |
          go build -o .\build\dsl.exe .\cmd

      - name: Build GUI
        run: |
          $WebView2Version = "1.0.1462.37"
          New-Item -ItemType Directory .\libs\webview2
          Invoke-WebRequest "https://www.nuget.org/api/v2/package/Microsoft.Web.WebView2/$WebView2Version" -OutFile .\libs\webview2.zip
          Expand-Archive .\libs\webview2.zip .\libs\webview2
          New-Item -Force -ItemType Directory .\build
          Copy-Item .\libs\webview2\build\native\x64\WebView2Loader.dll .\build\
          $Env:Path = "$Env:ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;$Env:Path"
          $Env:CGO_CXXFLAGS = "-I$PWD\libs\webview2\build\native\include"
          $Env:CGO_LDFLAGS = "-L$PWD\libs\webview2\build\native\x64"
          go build -tags gui -ldflags="-H windowsgui" -o .\build\dsl-gui.exe .\cmd

      - name: Zip
        run: |
          Set-Location .\build
          Compress-Archive -CompressionLevel NoCompression .\* build.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: ./build/build.zip

  build-macos:
    name: Build (macOS)
    runs-on: macos-10.15

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build CLI
        env:
          CGO_ENABLED: 0
        run: |
          go build -o ./build/dsl ./cmd

      - name: Build GUI
        run: |
          mkdir -p ./build/dsl-gui.app/Contents/MacOS
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleExecutable</key>
            <string>dsl-gui</string>
            <key>CFBundleIdentifier</key>
            <string>eu.3e8.go.dsl</string>
          </dict>
          </plist>' > ./build/dsl-gui.app/Contents/Info.plist
          go build -tags gui -o ./build/dsl-gui.app/Contents/MacOS/dsl-gui ./cmd

      - name: Zip
        run: |
          cd ./build
          zip -0 -r build.zip ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: ./build/build.zip

  release:
    name: Package and release
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-windows
      - build-macos

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine variables
        id: vars
        shell: bash
        env:
          TZ: UTC0
        run: |
          echo "version=master-$(git log -1 --format='%cd-%h' --date='format-local:%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "archivename=dsl-master-$(git log -1 --format='%cd-%h' --date='format-local:%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "time=$(git log -1 --format='%cd' --date='format-local:%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Prepare common files
        run: |
          mkdir -p ./build/template
          echo "${{ steps.vars.outputs.version }}" > ./build/template/VERSION
          cp LICENSE ./build/template/
          cp ./cmd/LICENSE-3RD-PARTY ./build/template/
          cp README.md ./build/template/
          mkdir ./build/template/docs
          cp ./docs/*.md ./build/template/docs/

      - name: Install pandoc
        run: |
          sudo apt update
          sudo apt install -y pandoc

      - name: Build HTML documentation
        run: |
          ./docs/build.sh ./build/template

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Build archives
        shell: bash
        run: |
          cd ./build
          for artifact in ../artifacts/*/; do
            target="$(basename "$artifact")"
            cp -r ./template "./${{ steps.vars.outputs.archivename }}-$target"
            unzip "../artifacts/$target/build.zip" -d "./${{ steps.vars.outputs.archivename }}-$target/"
            zip -r "${{ steps.vars.outputs.archivename }}-$target.zip" "${{ steps.vars.outputs.archivename }}-$target"
          done

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: github-master-builds
          prerelease: true
          allowUpdates: true
          removeArtifacts: true
          artifacts: "./build/*.zip"
          artifactContentType: application/zip
          name: Auto-built binaries
          body: |
            These binaries are automatically built from the master branch.\
            Current version: ${{ github.sha }} (${{ steps.vars.outputs.time }})
            
            Select the build for your platform from the assets below.
            
            *Note: If you want to get the corresponding source code please use Git.\
            The source archives linked below don't contain the actual source.*
