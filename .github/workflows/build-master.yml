name: Build master binaries

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            target: linux

          - os: windows-2022
            target: windows

          - os: macos-10.15
            target: macos

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine version and archive name
        id: vars
        shell: bash
        env:
          TZ: UTC0
        run: |
          echo "version=master-$(git log -1 --format='%cd-%h' --date='format-local:%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "archivename=dsl-master-$(git log -1 --format='%cd-%h' --date='format-local:%Y-%m-%d')-${{ matrix.target }}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Install dependencies (Linux)
        if: matrix.target == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Prepare
        run: |
          mkdir ${{ steps.vars.outputs.archivename }}
          echo "${{ steps.vars.outputs.version }}" > ./${{ steps.vars.outputs.archivename }}/VERSION
          cp LICENSE ./${{ steps.vars.outputs.archivename }}/
          cp ./cmd/LICENSE-3RD-PARTY ./${{ steps.vars.outputs.archivename }}/
          cp README.md ./${{ steps.vars.outputs.archivename }}/
          cp ./cmd/README-config.md ./${{ steps.vars.outputs.archivename }}/

      - name: Build CLI (non-Windows)
        if: matrix.target != 'windows'
        env:
          CGO_ENABLED: 0
        run: |
          go build -o ./${{ steps.vars.outputs.archivename }}/dsl ./cmd

      - name: Build CLI (Windows)
        if: matrix.target == 'windows'
        env:
          CGO_ENABLED: 0
        run: |
          go build -o .\${{ steps.vars.outputs.archivename }}\dsl.exe .\cmd

      - name: Build GUI (Linux)
        if: matrix.target == 'linux'
        run: |
          go build -tags gui -o ./${{ steps.vars.outputs.archivename }}/dsl-gui ./cmd

      - name: Build GUI (Windows)
        if: matrix.target == 'windows'
        run: |
          go build -tags gui -ldflags="-H windowsgui" -o .\${{ steps.vars.outputs.archivename }}\dsl-gui.exe .\cmd
          Copy-Item -Recurse "$(go env GOPATH)\pkg\mod\github.com\webview\webview@*\" webview
          Remove-Item -Recurse -Force .\webview\dll
          .\webview\script\build.bat
          Copy-Item .\webview\dll\x64\*.dll .\${{ steps.vars.outputs.archivename }}\

      - name: Build GUI (macOS)
        if: matrix.target == 'macos'
        run: |
          mkdir -p ./${{ steps.vars.outputs.archivename }}/dsl-gui.app/Contents/MacOS
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleExecutable</key>
            <string>dsl-gui</string>
            <key>CFBundleIdentifier</key>
            <string>eu.3e8.go.dsl</string>
          </dict>
          </plist>' > ./${{ steps.vars.outputs.archivename }}/dsl-gui.app/Contents/Info.plist
          go build -tags gui -o ./${{ steps.vars.outputs.archivename }}/dsl-gui.app/Contents/MacOS/dsl-gui ./cmd

      - name: Package (non-Windows)
        if: matrix.target != 'windows'
        run: |
          zip -r ${{ steps.vars.outputs.archivename }}.zip ${{ steps.vars.outputs.archivename }}

      - name: Package (Windows)
        if: matrix.target == 'windows'
        run: |
          Compress-Archive ${{ steps.vars.outputs.archivename }} ${{ steps.vars.outputs.archivename }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ steps.vars.outputs.archivename }}.zip

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine commit time
        id: vars
        shell: bash
        env:
          TZ: UTC0
        run: |
          echo "time=$(git log -1 --format='%cd' --date='format-local:%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: github-master-builds
          prerelease: true
          allowUpdates: true
          removeArtifacts: true
          artifacts: "*/*.zip"
          artifactContentType: application/zip
          name: Auto-built binaries
          body: |
            These binaries are automatically built from the master branch.\
            Current version: ${{ github.sha }} (${{ steps.vars.outputs.time }})
            
            Select the build for your platform from the assets below.
            
            *Note: If you want to get the corresponding source code please use Git.\
            The source archives linked below don't contain the actual source.*
